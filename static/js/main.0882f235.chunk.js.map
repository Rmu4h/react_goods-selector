{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","state","selectedGood","addStyleSelect","element","setState","prevState","resetSelected","myTitle","copyselectedGood","length","lastItem","pop","join","this","className","type","onClick","map","item","includes","React","Component","ReactDOM","render","document","getElementById"],"mappings":"qPAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAOIC,E,4MACJC,MAAe,CACbC,aAAc,CAACH,EAAgB,K,EAGjCI,eAAiB,SAACC,GAChB,EAAKC,UACH,SAACC,GAAD,MAAgB,CACdJ,aAAa,GAAD,mBAAMI,EAAUJ,cAAhB,CAA8BE,S,EAKhDG,cAAgB,WACd,EAAKF,UACH,iBAAO,CACLH,aAAc,Q,EAKpBM,QAAU,SAACN,GACT,IAAMO,EAAgB,YAAOP,GAE7B,GAA4B,IAAxBA,EAAaQ,OACf,MAAO,oBAGT,GAAIR,EAAaQ,QAAU,EAAG,CAC5B,IAAMC,EAAWF,EAAiBA,EAAiBC,OAAS,GAI5D,OAFAD,EAAiBG,MAEX,GAAN,OAAUH,EAAiBI,KAAK,MAAhC,gBAA6CF,EAA7C,iBAGF,MAAM,GAAN,OAAUF,EAAiBI,KAAK,SAAhC,iB,4CAGF,WAAU,IAAD,OACCX,EAAiBY,KAAKb,MAAtBC,aAER,OACE,sBAAKa,UAAU,MAAf,UACE,6BACGD,KAAKN,QAAQN,KAEhB,wDAEE,wBACEc,KAAK,SACLC,QAAS,kBAAM,EAAKV,iBAFtB,kBAQF,6BACGR,EAAgBmB,KAAI,SAAAC,GAAI,OACrBjB,EAAakB,SAASD,GAEpB,qBAAeJ,UAAU,SAAzB,UACGI,EACD,wBACEH,KAAK,SACLC,QAAS,kBAAM,EAAKd,eAAegB,IAFrC,wBAFOA,GAWT,+BACGA,EACD,wBACEH,KAAK,SACLC,QAAS,kBACP,EAAKd,eAAegB,IAHxB,wBAFOA,e,GAxEPE,IAAMC,WA4FTtB,IC7GfuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0882f235.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface State {\n  selectedGood: string[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedGood: [goodsFromServer[8]],\n  };\n\n  addStyleSelect = (element: string) => {\n    this.setState(\n      (prevState) => ({\n        selectedGood: [...prevState.selectedGood, element],\n      }),\n    );\n  };\n\n  resetSelected = () => {\n    this.setState(\n      () => ({\n        selectedGood: [],\n      }),\n    );\n  };\n\n  myTitle = (selectedGood: string[]) => {\n    const copyselectedGood = [...selectedGood];\n\n    if (selectedGood.length === 0) {\n      return 'No goods selected';\n    }\n\n    if (selectedGood.length >= 3) {\n      const lastItem = copyselectedGood[copyselectedGood.length - 1];\n\n      copyselectedGood.pop();\n\n      return `${copyselectedGood.join(', ')} and ${lastItem} are selected`;\n    }\n\n    return `${copyselectedGood.join(' and ')} is selected`;\n  };\n\n  render() {\n    const { selectedGood } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>\n          {this.myTitle(selectedGood)}\n        </h1>\n        <div>\n          Reset your selections\n          <button\n            type=\"button\"\n            onClick={() => this.resetSelected()}\n          >\n            x\n          </button>\n        </div>\n\n        <ul>\n          {goodsFromServer.map(item => (\n            ((selectedGood.includes(item)\n              ? (\n                <li key={item} className=\"active\">\n                  {item}\n                  <button\n                    type=\"button\"\n                    onClick={() => this.addStyleSelect(item)}\n                  >\n                    selected\n                  </button>\n                </li>\n              )\n              : (\n                <li key={item}>\n                  {item}\n                  <button\n                    type=\"button\"\n                    onClick={() => (\n                      this.addStyleSelect(item)\n                    )}\n                  >\n                    selected\n                  </button>\n                </li>\n              )\n            )\n            )))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}